Q.Given a grid of size n*n filled with 0, 1, 2, 3. Check whether there is a path possible from the source to destination. You can traverse up, down, right and left.
The description of cells is as follows:

A value of cell 1 means Source.
A value of cell 2 means Destination.
A value of cell 3 means Blank cell.
A value of cell 0 means Wall.

sol:
  class Solution
  {
    public boolean inside(int[][] grid,int r1,int c1,boolean[][] visited){
        int r=grid.length;
        int c=grid[0].length;
        return(r1>=0 && r1<r && c1>=0 && c1<c && ((grid[r1][c1]==2 || grid[r1][c1]==3) && !visited[r1][c1]));
    }
    public boolean dfs(int[][] grid,int r1,int c1,boolean [][] visited){
        int[] neighbourrow=new int[] {-1,0,1,0};
        int[] neighbourcolumn=new int[] {0,1,0,-1};
        visited[r1][c1]=true;
        for(int i=0;i<4;i++){
            if (inside(grid,r1+neighbourrow[i],c1+neighbourcolumn[i],visited)){
                if(grid[r1+neighbourrow[i]][c1+neighbourcolumn[i]]==2){
                    return true;
                }
                if(dfs(grid,r1+neighbourrow[i],c1+neighbourcolumn[i],visited)){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean is_Possible(int[][] grid)
    {
        int r=grid.length;
        int c=grid[0].length;
        boolean[][] visited=new boolean[r][c];
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]==1 && !visited[i][j]){
                    if(dfs(grid,i,j,visited)){
                        return true;
                    }
                }
            }
        }
        return false;
        
    }
  }


Sample Input: grid = {{3,0,3,0,0},{3,0,0,0,3}
,{3,3,3,3,3},{0,2,3,0,0},{3,0,0,1,3}}

Sample Output: 0
